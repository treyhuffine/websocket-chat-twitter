#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socketshbs:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var Twit = require('twit')

var T = new Twit({
    consumer_key:         process.env.CONSUMER_KEY
  , consumer_secret:      process.env.CONSUMER_SECRET
  , access_token:         process.env.ACCESS_TOKEN
  , access_token_secret:  process.env.ACCESS_SECRET
})

console.log(T);

var io = require('socket.io')(server);

var stream = T.stream('statuses/filter', { track: '#bitcoin' })

stream.on('tweet', function (tweet) {
  // io.emit('chat message', tweet.user.screen_name + ": " + tweet.text);
  var user = tweet.user;
  var ok = user.follower_count > 20 && (user.friends_count/user.followers_count < );
  if (ok && tweet.text.match(/#angularjs|angualr\.js/i)) {
    setTimeout(function() { T.post('favorites/create', { id: tweet.id_str }, function() { }) }, 1000);
  }
})

io.on('connection', function(socket) {
  io.emit('users count', io.engine.clientsCount);
  console.log('a user connected');
  socket.on('disconnect', function(){
    io.emit('users count', io.engine.clientsCount);
    console.log('user disconnected');
  });

  socket.on('chat message', function(msg) {
    console.log('message: ' + msg);
    io.emit('chat message', socket.request.connection.remoteAddress + ": " + msg);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
